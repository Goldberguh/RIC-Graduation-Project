/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ourscheduler;

import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Sim
 */
public class EditStudentFrame extends javax.swing.JFrame {

    /**
     * Creates new form EditStudentFrame
     */
    public EditStudentFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        searchBar = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        searchBar.setText("Enter user ID or last name...");
        searchBar.setToolTipText("");
        searchBar.setDragEnabled(true);
        searchBar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchBarMouseClicked(evt);
            }
        });
        searchBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBarActionPerformed(evt);
            }
        });

        jTable1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "User ID", "Username", "Password", "First Name", "Last Name", "Email", "Phone Number"
            }
        )
        {public boolean isCellEditable(int row, int col)
            {
                if(col == 0)
                {
                    return false;
                }
                else
                {
                    return true;
                }
            }
        }
    );
    jTable1.setFocusable(false);
    jTable1.setGridColor(new java.awt.Color(0, 0, 0));
    jTable1.setRowHeight(32);
    jTable1.setSelectionBackground(new java.awt.Color(102, 102, 255));
    jTable1.getTableHeader().setReorderingAllowed(false);
    jTable1.setShowGrid(true);
    jScrollPane2.setViewportView(jTable1);

    jButton2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
    jButton2.setText("Edit Selected User");
    jButton2.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton2ActionPerformed(evt);
        }
    });

    jPanel1.setBackground(new java.awt.Color(133, 1, 1));
    jPanel1.setForeground(new java.awt.Color(254, 234, 119));

    jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
    jLabel1.setForeground(new java.awt.Color(254, 234, 119));
    jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel1.setText("Edit Student");

    jButton3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
    jButton3.setText("Logout");
    jButton3.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton3ActionPerformed(evt);
        }
    });

    jButton4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
    jButton4.setText("Return");
    jButton4.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton4ActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addComponent(jButton4)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3)))
            .addContainerGap())
    );
    jPanel1Layout.setVerticalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jButton3)
                .addComponent(jButton4))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(26, 26, 26))
    );

    jComboBox1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
    jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Student", "Professor" }));
    jComboBox1.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jComboBox1ActionPerformed(evt);
        }
    });

    jButton5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
    jButton5.setText("Delete");
    jButton5.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton5ActionPerformed(evt);
        }
    });

    jButton6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
    jButton6.setText("Add Class");
    jButton6.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton6ActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 816, Short.MAX_VALUE)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(jButton1)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton6)
                    .addGap(35, 35, 35)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jButton5)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jButton2)))
            .addContainerGap())
        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jButton1)
                .addComponent(jButton2)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jButton5)
                .addComponent(jButton6))
            .addGap(18, 18, 18)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 565, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents
    //borrowed md5 code from http://www.sergiy.ca/how-to-make-java-md5-and-sha-1-hashes-compatible-with-php-or-mysql/
    public static String md5(String input) throws NoSuchAlgorithmException 
    {
        String result = input;
    if(input != null) 
    {
        MessageDigest md = MessageDigest.getInstance("MD5"); //or "SHA-1"
        md.update(input.getBytes());
        BigInteger hash = new BigInteger(1, md.digest());
        result = hash.toString(16);
        while(result.length() < 32) 
        { //40 for SHA-1
            result = "0" + result;
        }
    }
    return result;
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //Search Button
        Connection conn = databaseQuery.getConnection();
        PreparedStatement psID = null;
        PreparedStatement psName = null;
        PreparedStatement psID2 = null;
        PreparedStatement psName2 = null;
        ResultSet rs;
        ResultSet rs2;

        String tryName;
       
        int studentID = -1;
        
        //user_info
        String userName = "";
        String password = "";
        String accountType = "";
        
        //student/professor
        String firstName = "";
        String lastName = "";
        String email = "";
        String phoneNum = "";
        
        //student
        //int credits = 0;
        //Float gpa;
        

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

        model.setRowCount(0);
        
        if(jComboBox1.getSelectedIndex() == 0)
        {
            //try searching by id number
            try
            {
                int tryID = Integer.parseInt(searchBar.getText());
                psID = conn.prepareStatement("SELECT `user_info`.`Student_ID`, `user_info`.`Username`, `user_info`.`Password` FROM `user_info` WHERE `user_info`.Student_ID = ?;");
                psID.setInt(1, tryID);
                
                psID2 = conn.prepareStatement("SELECT `student`.`Fname`, `student`.`Lname`, `student`.`Email`, `student`.`Phone_Num` FROM `student` WHERE `student`.`Student_ID` = ?");
                psID2.setInt(1, tryID);  

                rs = psID.executeQuery();

                while(rs.next())
                {
                    studentID = rs.getInt("Student_ID");
                    userName = rs.getString("Username");
                    password = rs.getString("Password");
                                                                 
              
                }
                rs2 = psID2.executeQuery();
                while (rs2.next())
                {
                    firstName = rs2.getString("FName");
                    lastName = rs2.getString("Lname");
                    email = rs2.getString("Email");
                    phoneNum = rs2.getString("Phone_Num");
                    
                    //credits = rs2.getInt("Credits");
                    //gpa = rs2.getFloat("Sum_GPA");
                  
                    Object[] row = {studentID, userName, "", firstName, lastName, email, phoneNum};
                                           
                    model.addRow(row);
                }               
            }
            catch (SQLException ex)
            {
                Logger.getLogger(LoginFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            catch(NumberFormatException e)
            {

            }         
            
            if(studentID == -1)
            {
                //try searching by last name
                try
                {   
                    //Query Student by last name
                    psName = conn.prepareStatement("SELECT `student`.`Student_ID`, `student`.`Fname`, `student`.`Lname`, `student`.`Email`, `student`.`Phone_Num` FROM `student` WHERE `student`.`Lname` LIKE ?;");
                    psName.setString(1, "%" + searchBar.getText() + "%");
                     
                    rs = psName.executeQuery();

                    while(rs.next())
                    {
                        studentID = rs.getInt("Student_ID");
                                        
                        firstName = rs.getString("Fname");
                        lastName = rs.getString("Lname");
                        email = rs.getString("Email");
                        phoneNum = rs.getString("Phone_Num");
                    
                        //credits = rs.getInt("Credits");
                        //gpa = rs.getFloat("Sum_GPA");   
                        
                        //Query user _info using ID obtained from first query                           
                        psName2 = conn.prepareStatement("SELECT `user_info`.`Username`, `user_info`.`Password` FROM `user_info` WHERE `user_info`.`Student_ID` = ?");
                        psName2.setInt(1, studentID); 

                        rs2 = psName2.executeQuery();

                        while (rs2.next())
                        {
                            userName = rs2.getString("Username");
                            password = rs2.getString("Password");
                              

                        }
                        Object[] row = {studentID, userName, "", firstName, lastName, email, phoneNum};

                        model.addRow(row);                       
                    }                    
                }
                catch (SQLException ex)
                {
                    Logger.getLogger(LoginFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                catch(NumberFormatException e)
                {

                }                 
            }
            if(jTable1.getRowCount() > 0)
            {
                int checkID = (int) jTable1.getModel().getValueAt(0, 0);
                
                if(checkID == 0)
                {
                    model.removeRow(0);
                }
            }
        }
        //professor
        else if(jComboBox1.getSelectedIndex() == 1)
        {
            try
            {
                int tryID = Integer.parseInt(searchBar.getText());
                psID = conn.prepareStatement("SELECT * FROM `professor` WHERE `professor`.`Prof_ID` = ?");
                psID.setInt(1, tryID);  
                
                rs = psID.executeQuery();
                
                while (rs.next())
                {
                    studentID = rs.getInt("Prof_ID");
                    firstName = rs.getString("FName");
                    lastName = rs.getString("LName");
                    email = rs.getString("Email");
                    phoneNum = rs.getString("Phone_Num");
                    
                    Object[] row = {studentID, firstName, lastName, email, phoneNum};
                                           
                    model.addRow(row);                    
                }                
            }
            catch (SQLException ex)
            {
                Logger.getLogger(LoginFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            catch(NumberFormatException e)
            {

            }
            try
            {
                
                psName = conn.prepareStatement("SELECT * FROM `professor` WHERE `professor`.`LName` LIKE ?;");
                psName.setString(1, "%" + searchBar.getText() + "%");

                rs = psName.executeQuery();

                while(rs.next())
                {
                    studentID = rs.getInt("Prof_ID");
                    
                    firstName = rs.getString("FName");
                    lastName = rs.getString("LName");
                    email = rs.getString("Email");
                    phoneNum = rs.getString("Phone_Num"); 
                                                                             
                    Object[] row = {studentID, firstName, lastName, email, phoneNum};
                                           
                    model.addRow(row);          
                }

            }
            catch (SQLException ex)
            {
                Logger.getLogger(LoginFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            catch(NumberFormatException e)
            {

            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        //Edit Student Button

        int row = jTable1.getSelectedRow();
        int column = 0;
        int editID;
        String userName;
        String password;
        String firstName;
        String lastName;
        String email;
        String phoneNum; 
        //String tempCredits;
        //String tempGPA;
        //int credits;
        //Float gpa;
        
        int response;
        
        Connection conn = databaseQuery.getConnection();
        PreparedStatement psEdit = null;
        ResultSet rs;
        
        if(row == -1)
        {
            JOptionPane.showMessageDialog(null, "Select a user first");
        }
        else if(jComboBox1.getSelectedIndex() == 0)
        {
            //Update student
            //
            //
            response = JOptionPane.showConfirmDialog(this, "Are you sure you wish to edit this student?", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

            if (response ==JOptionPane.YES_OPTION)
            {
                editID = (int) jTable1.getModel().getValueAt(row, column);
                userName = (String)jTable1.getModel().getValueAt(row, 1); 
                password = (String)jTable1.getModel().getValueAt(row, 2); 
                firstName = (String)jTable1.getModel().getValueAt(row, 3);
                lastName = (String)jTable1.getModel().getValueAt(row, 4);
                email = (String)jTable1.getModel().getValueAt(row, 5);
                phoneNum = (String)jTable1.getModel().getValueAt(row, 6);
                
                //tempCredits = jTable1.getModel().getValueAt(row, 7).toString();
                //credits = Integer.parseInt(tempCredits);
                //tempGPA = jTable1.getModel().getValueAt(row, 8).toString();                
                //gpa = Float.valueOf(tempGPA);              

                try
                {
                    
                    psEdit = conn.prepareStatement("UPDATE `student` SET `Fname` = ?, `Lname` = ?, `Email` = ?, `Phone_Num` = ? WHERE `Student_ID` = ?");
                    
                    psEdit.setString(1, firstName);
                    psEdit.setString(2, lastName);
                    psEdit.setString(3, email);
                    psEdit.setString(4, phoneNum);
                    //psEdit.setInt(5, credits);
                   // psEdit.setFloat(6, gpa);
                    psEdit.setInt(5, editID);

                    psEdit.executeUpdate();
                    
                    //update user_info
                    psEdit = conn.prepareStatement("UPDATE `user_info` SET `Username` = ? WHERE `Student_ID` = ?");
                     
                    psEdit.setString(1, userName);                    
                    psEdit.setInt(2, editID);
                    
                    psEdit.executeUpdate();
                    
                    if(password != null && !password.trim().isEmpty())
                    {
                        psEdit = conn.prepareStatement("UPDATE `user_info` SET `Password` = ? WHERE `Student_ID` = ?");
                     
                        psEdit.setString(1, md5(String.valueOf(password)));                    
                        psEdit.setInt(2, editID);
                        
                        psEdit.executeUpdate();
                    }
                    JOptionPane.showMessageDialog(null, "Student Updated");                    
                }
                catch (SQLException ex)
                {
                    Logger.getLogger(LoginFrame.class.getName()).log(Level.SEVERE, null, ex);
                } 
                catch (NoSuchAlgorithmException ex) 
                {
                    Logger.getLogger(EditStudentFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        else if(jComboBox1.getSelectedIndex() == 1)
                
        {
            //Update professor
            //
            //
            
            response = JOptionPane.showConfirmDialog(this, "Are you sure you wish to edit this professor?", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            
            if (response == JOptionPane.YES_OPTION)
            {
                
                editID = (int) jTable1.getModel().getValueAt(row, column);                 
                firstName = (String)jTable1.getModel().getValueAt(row, 1);
                lastName = (String)jTable1.getModel().getValueAt(row, 2);
                email = (String)jTable1.getModel().getValueAt(row, 3);
                phoneNum = (String)jTable1.getModel().getValueAt(row, 4);
                
                try
                {
                    psEdit = conn.prepareStatement("UPDATE `professor` SET `FName` = ?, `LName` = ?, `Email` = ?, `Phone_Num` = ? WHERE `Prof_ID` = ?");
                    
                    psEdit.setString(1, firstName);
                    psEdit.setString(2, lastName);
                    psEdit.setString(3, email);
                    psEdit.setString(4, phoneNum);                    
                    psEdit.setInt(5, editID);

                    psEdit.executeUpdate();
                    
                    JOptionPane.showMessageDialog(null, "Professor Updated");
                }
                catch (SQLException ex)
                {
                    Logger.getLogger(LoginFrame.class.getName()).log(Level.SEVERE, null, ex);
                }                 
            }                
        }   
       
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        LoginFrame log = new LoginFrame();
        log.setVisible(true);
        log.pack();
        log.setLocationRelativeTo(null);
        log.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        adminHFrame ahome = new adminHFrame();
        ahome.setVisible(true);
        ahome.pack();
        ahome.setLocationRelativeTo(null);
        ahome.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // Combo Box Code
        
        if(jComboBox1.getSelectedIndex() == 0)
        {
            jButton6.setVisible(true);
            
            jLabel1.setText("Edit Student");
            
            jTable1 = new javax.swing.JTable();

            jTable1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

            jTable1.setModel(new javax.swing.table.DefaultTableModel(new Object [][] 
            {
             

            },
            new String [] 
            {
            "User ID", "Username", "Password", "First Name", "Last Name", "Email", "Phone Number"            
            }
            )
            {public boolean isCellEditable(int row, int col)
                {
                    if(col == 0)
                    {
                        return false;
                    }
                    else
                    {
                        return true;
                    }
                }
            }
            );

            jTable1.setFocusable(false);

            jTable1.setGridColor(new java.awt.Color(0, 0, 0));

            jTable1.setRowHeight(32);

            jTable1.setSelectionBackground(new java.awt.Color(102, 102, 255));

            jTable1.getTableHeader().setReorderingAllowed(false);
            jTable1.setShowGrid(true);
            jScrollPane2.setViewportView(jTable1);

        }
        
        else if (jComboBox1.getSelectedIndex() == 1) 
        {
            jButton6.setVisible(false);
            
            jLabel1.setText("Edit Professor");
            
            jTable1 = new javax.swing.JTable();

            jTable1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

            jTable1.setModel(new javax.swing.table.DefaultTableModel(new Object [][] 
            {
             

            },
            new String [] 
            {
            "User ID", "First Name", "Last Name", "Email", "Phone Number"           
            }
            )
            {public boolean isCellEditable(int row, int col)
                {
                    if(col == 0)
                    {
                        return false;
                    }
                    else
                    {
                        return true;
                    }
                }
            }
            );

            jTable1.setFocusable(false);

            jTable1.setGridColor(new java.awt.Color(0, 0, 0));

            jTable1.setRowHeight(32);

            jTable1.setSelectionBackground(new java.awt.Color(102, 102, 255));

            jTable1.getTableHeader().setReorderingAllowed(false);
            jTable1.setShowGrid(true);
            jScrollPane2.setViewportView(jTable1);
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void searchBarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchBarMouseClicked
        // Mouse Click in Search Bar
        searchBar.setText("");
    }//GEN-LAST:event_searchBarMouseClicked

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        //Delete Button
        int row = jTable1.getSelectedRow();
        int column = 0;
        int response;
        int delID;
        
        Connection conn = databaseQuery.getConnection();
        PreparedStatement psDel = null;
        ResultSet rs;
        
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            if(row == -1)
            {
                JOptionPane.showMessageDialog(null, "Select a user first");
            }
            //
            //Delete Student
            //
            else if(jComboBox1.getSelectedIndex() == 0) 
            {
                response = JOptionPane.showConfirmDialog(this, "Are you sure you wish to delete this student?", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                
                if (response ==JOptionPane.YES_OPTION)
                {
                    delID = (int) jTable1.getModel().getValueAt(row, column);
                                        
                   
                    try
                    {
                        
                        
                        psDel = conn.prepareStatement("DELETE FROM `user_info` WHERE `user_info`.`Student_ID` = ? ");                        
                        psDel.setInt(1, delID);
                        
                        psDel.executeUpdate();
                        
                        psDel = conn.prepareStatement("DELETE FROM `current_course` WHERE `current_course`.`Student_ID` = ? ");                        
                        psDel.setInt(1, delID);
                                              
                        psDel.executeUpdate();    
                        
                        psDel = conn.prepareStatement("DELETE FROM `student` WHERE `student`.`Student_ID` = ? ");                        
                        psDel.setInt(1, delID);
                        
                        psDel.executeUpdate();
                        
                        model.removeRow(row); 
                        
                        JOptionPane.showMessageDialog(null, "Student Deleted");
                    }
                    catch (SQLException ex)
                    {
                        Logger.getLogger(LoginFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
            //
            //Delete Professor
            //
            else if(jComboBox1.getSelectedIndex() == 1) 
            {
                response = JOptionPane.showConfirmDialog(this, "Are you sure you wish to delete this professor?", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                
                if (response ==JOptionPane.YES_OPTION)
                {
                    delID = (int) jTable1.getModel().getValueAt(row, column);                                         
                   
                    try
                    {
                        psDel = conn.prepareStatement("DELETE FROM `professor` WHERE `professor`.`Prof_ID` = ? ");
                        
                        psDel.setInt(1, delID);
                        
                        
                        psDel.executeUpdate();
                        
                        
                        model.removeRow(row);
                        
                        JOptionPane.showMessageDialog(null, "Professor Deleted");
                    }
                    catch (SQLException ex)
                    {
                        Logger.getLogger(LoginFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void searchBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchBarActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // Add Class
        int row = jTable1.getSelectedRow();
        if(row == -1)
        {
            JOptionPane.showMessageDialog(null, "Select a student first");
        }
        else
        {
            int ID = (int) jTable1.getModel().getValueAt(row, 0);
            adminStuSched sched = new adminStuSched(ID);
            sched.setVisible(true);
            sched.pack();
            sched.setLocationRelativeTo(null);
            sched.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            this.dispose();
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditStudentFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditStudentFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditStudentFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditStudentFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EditStudentFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField searchBar;
    // End of variables declaration//GEN-END:variables
}
